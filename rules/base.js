import stylisticJs from '@stylistic/eslint-plugin-js';
import optional from './optional/index.js';

export default [
	/** @type {import('eslint').Linter.Config} */ ({
		plugins: {
			'@stylistic/js': stylisticJs,
		},
		rules: {
			'@stylistic/js/line-comment-position': 'error',
			'@stylistic/js/no-multiple-empty-lines': 'error',
			'@stylistic/js/padding-line-between-statements': [
				'error',
				{ blankLine: 'always', prev: 'case', next: 'case' },
			],
			'@stylistic/js/spaced-comment': 'error',
			'array-callback-return': ['error', { allowImplicit: true }],
			'block-scoped-var': 'error',
			camelcase: 'error',
			'constructor-super': 'error',
			'default-case-last': 'error',
			'dot-notation': 'error',
			eqeqeq: ['error', 'smart'],
			'for-direction': 'error',
			'getter-return': 'error',
			'new-cap': ['error', { capIsNew: false, newIsCap: true }],
			'no-bitwise': 'error',
			'no-console': 'error',
			'no-const-assign': 'error',
			'no-constructor-return': 'error',
			'no-constant-condition': 'error',
			'no-debugger': 'error',
			'no-dupe-args': 'error',
			'no-dupe-class-members': 'error',
			'no-dupe-else-if': 'error',
			'no-dupe-keys': 'error',
			'no-duplicate-case': 'error',
			'no-duplicate-imports': 'error',
			'no-else-return': 'error',
			'no-empty': ['error', { allowEmptyCatch: true }],
			'no-extra-boolean-cast': 'error',
			'no-func-assign': 'error',
			'no-global-assign': 'error',
			'no-import-assign': 'error',
			'no-invalid-regexp': 'error',
			'no-irregular-whitespace': 'error',
			'no-lonely-if': 'error',
			'no-negated-condition': 'error',
			'no-nested-ternary': 'error',
			'no-new': 'error',
			'no-new-native-nonconstructor': 'error',
			'no-obj-calls': 'error',
			'no-sparse-arrays': 'error',
			'no-redeclare': 'error',
			'no-shadow': 'error',
			'no-this-before-super': 'error',
			'no-throw-literal': 'error',
			'no-undef': 'error',
			'no-undef-init': 'error',
			'no-unneeded-ternary': 'error',
			'no-unreachable': 'error',
			'no-unused-vars': 'error',
			'no-unsafe-negation': 'error',
			'no-unsafe-optional-chaining': 'error',
			'no-use-before-define': ['error', { functions: false, classes: false, variables: false }],
			'no-useless-escape': 'error',
			'no-useless-return': 'error',
			'operator-assignment': 'error',
			'prefer-const': ['error', { destructuring: 'all' }],
			'require-await': 'error',
			'require-yield': 'error',
			'use-isnan': 'error',
			'valid-typeof': 'error',
		},
	}),
	...optional,
];
